#!/usr/bin/env node
import {
    execSync
} from 'child_process';
import { writeFile } from 'fs';
import ncp from 'ncp';
import { join } from 'path';
import { stdin, stdout } from 'process';

const gettext = (x: string) => x; 

const readline = require("readline");
const rl = readline.createInterface({
    input: stdin,
    output: stdout
});

rl.question(gettext("New site name: "), (SITE_NAME: string) => {
    rl.question("Theme's Git repository: ", (THEME_REPO: string) => {
        const THEME = THEME_REPO.split('/').pop()?.split('.')[0];
        if (THEME) {
            rl.close();
            generateSite(SITE_NAME, THEME_REPO, THEME);
            copyDefaults(SITE_NAME, THEME);
            // execSync(`cd ${SITE_NAME} && git add * && git commit -m 'Add theme and copy in exampleSite'`);
        } else {
            rl.question("Theme's name: ", (name: string) => {
                rl.close();
                generateSite(SITE_NAME, THEME_REPO, name);
                copyDefaults(SITE_NAME, name);
                // execSync(`cd ${SITE_NAME} && git add * && git commit -m 'Add theme and copy in exampleSite'`);
            });
        } 

        // removeSubmodule(theme)
    });
});

rl.on("close", function() {
    console.log("\nThanks!\n");
});
export const generateSite = (site: string, repo: string, theme: string) => {
    const options = { cwd: site };
    execSync(`hugo new site ${site}`);
    execSync(`git init`, options);
    execSync(`git clone ${repo} themes/${theme} --depth=1`, options);
    execSync(`rm -rf themes/${theme}/.git`, options);
};

export const copyDefaults = (site: string, theme: string) => {
    ncp(`${site}/themes/${theme}/exampleSite`, `${site}`, (err) => {
        if (err) {
            console.warn('Not found /exampleSite folder. Copy whole git repo into main folder.')
            ncp(`${site}/themes/${theme}`, `${site}`, {
                filter: (fileName) => !([
                    '.git',
                    'README.md'
                ].includes(fileName))
            }, (err) => {
                return console.error('Failed', err)
            });
        }

        console.log('Data from /exampleSite copied');
        execSync(`rm -rf themes/${theme}/.git`, {
            cwd: site
        });
        execSync(`rm -rf .gitmodules`, {
            cwd: site
        });
        
        writeFile(join(site,'.gitignore'), gitIgnoreString, function(err) {
            if (err) {
                console.log(err);
            } else {
                console.log(".gitignore file generated");
            }
            
            try {
                execSync(`git add * && git commit -m 'Initial commit for ${site}'`, {
                    cwd: site
                });
            } catch( e) {
                console.warn('Failed adding files to git, continue...')
            }
            
            process.exit(0);
        }); 

        
    })
}

const gitIgnoreString = `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release
node_modules/
jspm_packages/
web_modules/
*.tsbuildinfo
.npm
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out
.nuxt
dist
.cache/
.vscode-test
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*`;